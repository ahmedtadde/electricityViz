{
    "collab_server" : "",
    "contents" : "shinyServer(function(input, output) {\n    \n    # Reactive resources\n    # --------------------------------\n    # dataframe resource\n    resource.df <- reactive({\n      \n      copy(df_base)[,\n                    PRICE:= df_base[, get(input$usage)]\n                  ][\n                    PRICE <= 25 &\n                    PRICE >= 1 &  # filter out unreasonable data\n                    TDU == input$tdu &\n                    RATE_TYPE %in% input$rate_type &\n                    PREPAID %in% input$prepaid &\n                    TOU %in% input$tou &\n                    PROMOTION %in% input$promotion &\n                    TERM_LENGTH >= input$term_lengths[1] &\n                    TERM_LENGTH <= input$term_lengths[2] &\n                    RENEWABLE >= input$renewables[1] &\n                    RENEWABLE <= input$renewables[2]\n                  ][,\n                    RANK := min_rank(PRICE)\n                  ][, \n                    REP_COLOR := color.mapper(REP, REP_COLOR_MAP, input$rep1,input$rep2,input$rep3)\n                  \n                  ] -> df\n      \n      return(setorder(df, RANK))\n      \n      # df <- df_base %>%  # subset/filter df_base based on user selections\n      #     filter(PRICE <= 25,\n      #            PRICE >= 1,  # filter out unreasonable data\n      #            TDU == input$tdu,\n      #            RATE_TYPE %in% input$rate_type,\n      #            PREPAID %in% input$prepaid,\n      #            TOU %in% input$tou,\n      #            PROMOTION %in% input$promotion,\n      #            TERM_LENGTH >= input$term_lengths[1],\n      #            TERM_LENGTH <= input$term_lengths[2],\n      #            RENEWABLE >= input$renewables[1],\n      #            RENEWABLE <= input$renewables[2]) %>%\n      #     mutate(RANK = min_rank(PRICE),\n      #            # This part is personally hideous, but it's the best way I\n      #            # can express this with dplyr's methods.  Hopefuly Hadley\n      #            # will implement data mutations with mutation_if in some\n      #            # future dplyr iteration.  In addition, R's switch statements\n      #            # aren't really flexible to handle switch cases against\n      #            # expressions, which would have been a great fit here.\n      #            REP_COLOR = ifelse(\n      #                REP == input$rep1, REP_COLOR_MAP[[\"REP1\"]], ifelse(\n      #                    REP == input$rep2, REP_COLOR_MAP[[\"REP2\"]], ifelse(\n      #                        REP == input$rep3, REP_COLOR_MAP[[\"REP3\"]],\n      #                        REP_COLOR_MAP[[\"OTHER\"]])\n      #                )\n      #            )\n      #     ) %>%\n      #     arrange(RANK)  # sort by rank\n        # return(df)\n    })\n    \n    \n    # Server outputs\n    # --------------------------------\n    # datatable output\n    output$datatable <- renderDataTable({\n      \n      datatable(\n        \n        copy(resource.df)[, c(\"EFL_URL\", \"REP_COLOR\") := NULL],\n        filter = 'top',\n        rownames = FALSE,\n        selection=\"multiple\", \n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Blrtip',\n          autoWidth = TRUE,\n          buttons = list('excel', 'csv'),\n          Responsive = TRUE,\n          lengthMenu = list(c(10, 20, 50, 100), c('10', '20','50','100'))\n        )\n      )\n    })\n    \n    \n    \n    # summary output\n    output$rankingSummary <- renderUI({\n        # subsets of data for summary table\n        df_best <-  resource.df()[RANK ==1]\n        df_top10 <- resource.df()[RANK <= 10]\n        df_top30 <- resource.df()[RANK <= 30]\n        \n        summary <- HTML(\n            sprintf(\"\n                    <b>Best:</b> %sc/kWh <small><i>(%s)</i></small><br />\n                    <b>Top 10:</b> %sc/kWh<br />\n                    <b>Top 30:</b> %sc/kWh<br />\n                    <b>Mean:</b> %sc/kWh <small><i>(%s products)</i></small><br /><br />\n                    <b>Top 10 REPS:</b> <small>%s</small><br />\n                    \",\n                    min(df_best$PRICE), paste(df_best$PRODUCT, collapse=\", \"),\n                    max(df_top10$PRICE),\n                    max(df_top30$PRICE),\n                    round(resource.df()[, mean(PRICE, na.rm = T)], 1),  \n                    resource.df()[PRICE < mean(PRICE, na.rm = T), .N],\n                    paste(df_top10$REP, collapse=\", \")\n                  )\n        )\n        \n        \n        return(summary)\n    })\n    \n    \n    # ggvis outputs\n    # --------------------------------\n    # ggvis tooltip helper\n    tooltip_helper <- function(data) {\n        sprintf(\"<b class='text-warning'><i>%s</i></b><br />\n                <b>REP:</b> %s<br />\n                <b>RANK:</b> #%s<br />\n                <b>PRICE:</b> %sc/kWh<br />\n                <b>TERM:</b> %sM<br />\n                <b>PROMOTION:</b> %s<br />\",\n                resource.df()[ID %in% data$ID, PRODUCT],\n                resource.df()[ID %in% data$ID, REP],\n                resource.df()[ID %in% data$ID, RANK],\n                resource.df()[ID %in% data$ID, PRICE],\n                resource.df()[ID %in% data$ID, TERM_LENGTH],\n                resource.df()[ID %in% data$ID, PROMOTION]\n              )\n    }\n    \n    # rankings_plot ggvis output\n    resource.df %>% \n        ggvis(x=~PRICE, y=~REP, size=~TERM_LENGTH, fill:=~REP_COLOR, stroke=\"lightsteelblue\", key:=~ID) %>% \n        layer_points() %>%\n        add_axis(\"x\", subdivide=4) %>%\n        add_axis(\"y\", title=\"\") %>%\n        hide_legend(\"stroke\") %>%\n        add_tooltip(tooltip_helper, \"hover\") %>%\n        bind_shiny(\"rankings_plot\")\n    \n    # market_histogram ggvis output\n    resource.df %>% \n        ggvis(x=~PRICE, fill:=~REP_COLOR, stroke=\"lightsteelblue\") %>% \n        group_by(REP_COLOR) %>%\n        layer_histograms(width=input_slider(label=\"Binwidth\", min=0.1, max=2, value=0.2, step=0.1)) %>% \n        add_axis(\"x\", subdivide=4) %>%\n        hide_legend(\"stroke\") %>%\n        add_tooltip(histogram_tooltip, \"hover\") %>%\n        bind_shiny(\"market_histogram\", \"market_histogram_slider\")\n    \n    # market_scatterplot ggvis output\n    resource.df %>% \n        ggvis(x=~PRICE, y=~TERM_LENGTH, size:=50, fill:=~REP_COLOR, stroke=\"lightsteelblue\", key:=~ID) %>% \n        layer_points() %>% \n        add_axis(\"x\", subdivide=4) %>%\n        hide_legend(\"stroke\") %>%\n        add_tooltip(tooltip_helper, \"hover\") %>%\n        bind_shiny(\"market_scatterplot\")\n})",
    "created" : 1494619818878.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4228570808",
    "id" : "6FBA0915",
    "lastKnownWriteTime" : 1494623427,
    "last_content_update" : 1494623427610,
    "path" : "~/GITHUB/electricityViz/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}