{
    "collab_server" : "",
    "contents" : "shinyServer(function(input, output) {\n    \n    # Reactive resources\n    # --------------------------------\n    # dataframe resource\n    resource.df <- reactive({\n      if( \"\" %in% c(input$prepaid,input$rate_type,input$tou,input$promotion,\n                    input$tdu,input$rep1,input$rep2,input$rep3)) return(NULL)\n      \n      \n      if(input$prepaid %in% \"ALL\"){ prepaid <- c(\"TRUE\",\"FALSE\")}else{prepaid <- input$prepaid}\n      if(input$tou %in% \"ALL\"){ tou <- c(\"TRUE\",\"FALSE\")}else{tou<- input$tou}\n      if(input$promotion %in% \"ALL\"){ promotion <- c(\"TRUE\",\"FALSE\")}else{promotion <- input$promotion}\n      \n      copy(df_base)[,\n                    PRICE:= df_base[, get(input$usage)]\n                  ][\n                    PREPAID %in% prepaid &\n                    TOU %in% tou &\n                    PROMOTION %in% promotion &\n                    PRICE <= 25 &\n                    PRICE >= 1 &  # filter out unreasonable data\n                    TDU == input$tdu &\n                    RATE_TYPE %in% input$rate_type &\n                    TERM_LENGTH >= input$term_lengths[1] &\n                    TERM_LENGTH <= input$term_lengths[2] &\n                    RENEWABLE >= input$renewables[1] &\n                    RENEWABLE <= input$renewables[2]\n                  ] -> df\n      \n      if( is.null(df) | dim(df)[1] == 0 | !is.data.table(df)) return(NULL)\n      \n      \n      df[,RANK := min_rank(PRICE)]\n      \n      return(setorder(df, RANK))\n    })\n    \n    \n    # Server outputs\n    # --------------------------------\n    # datatable output\n    output$datatable <- renderDataTable({\n      \n      if (is.null(resource.df())) return(NULL)\n      if (!is.data.table(resource.df())) return(NULL)\n      \n      datatable(\n        resource.df(),\n        filter = 'top',\n        rownames = FALSE,\n        selection=\"multiple\", \n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Blrtip',\n          autoWidth = TRUE,\n          buttons = list('excel', 'csv'),\n          Responsive = TRUE,\n          lengthMenu = list(c(10, 20, 50, 100), c('10', '20','50','100'))\n        )\n      )\n    })\n    \n    \n    \n    # summary output\n    output$rankingSummary <- renderUI({\n        # subsets of data for summary table\n      \n        if (is.null(resource.df())) return(HTML(\"<b> There are no records matching \n                                                the combination of parameters chosen. \n                                                Try other selections.</b>\"\n                                                )\n                                           )\n      \n      if (!is.data.table(resource.df())) return(HTML(\"<b>ISSUE WITH RANK AND/OR REP_COLOR VARIABLES</b>\"))\n      \n      \n        df_best <-  resource.df()[RANK ==1]\n        df_top10 <- resource.df()[RANK <= 10]\n        df_top30 <- resource.df()[RANK <= 30]\n        \n        summary <- HTML(\n            sprintf(\"\n                    <b>Best:</b> %s c/kWh <small><i>( %s )</i></small><br />\n                    <b>Top 10:</b> %s c/kWh<br />\n                    <b>Top 30:</b> %s c/kWh<br />\n                    <b>Mean:</b> %s c/kWh <small><i>( %s products )</i></small><br /><br />\n                    <b>Top 10 PRODS:</b> <small>%s</small><br />\n                    \",\n                    min(df_best$PRICE), paste(df_best$PRODUCT, collapse=\", \"),\n                    max(df_top10$PRICE),\n                    max(df_top30$PRICE),\n                    round(resource.df()[, mean(PRICE, na.rm = T)], 1),  \n                    resource.df()[PRICE < mean(PRICE, na.rm = T), .N],\n                    paste(df_top10$PRODUCT, collapse=\", \")\n                  )\n        )\n        \n        \n        return(summary)\n    })\n    \n    # rankings_plot plotly output\n    output$rankings_plot <- renderPlotly({\n      \n      if(is.null(resource.df()) | !is.data.table(resource.df())) return(NULL)\n      color.map <- color.mapper(resource.df(), REP_COLOR_MAP, input$rep1,input$rep2,input$rep3)\n      \n      ax <- list(\n        title = \"PRICE\",\n        titlefont= list(\n          family = \"Courier New, monospace\",\n          size = 17\n        ),\n        zeroline = FALSE,\n        showline = FALSE,\n        showticklabels = TRUE,\n        showgrid = FALSE\n      )\n      \n      ay <- list(\n        title = \"Retail Electric Provide (REP)\",\n        titlefont= list(\n          family = \"Courier New, monospace\",\n          size = 17\n        ),\n        zeroline = FALSE,\n        showline = FALSE,\n        showticklabels = TRUE,\n        showgrid = FALSE\n        \n      )\n      \n      plot_ly(data = copy(resource.df())[, REP:= factor(REP, levels = sort(unique(REP)))], \n              x = ~PRICE,\n              y = ~REP,\n              mode = 'markers',\n              type = 'scatter', \n              color = ~REP,\n              colors = color.map,\n              hoverinfo = 'text',\n              text = ~paste0(\n                '</br> Product: ', PRODUCT,\n                '</br> Price: $', PRICE,\n                '</br> Rank: ', RANK,\n                '</br> Rate Type: ', RATE_TYPE,\n                '</br> Term length: ', TERM_LENGTH,\n                '</br> Retail Electric Provide (REP): ', REP,\n                '</br> Transmission and Distribution Service Provider (TDU): ', TDU\n              )\n      )%>%\n        layout(xaxis = ax, yaxis = ay) #showlegend = FALSE\n    })\n    # resource.df %>%\n    #   ggvis(x=~PRICE, y=~REP, size=~TERM_LENGTH, fill:=~REP_COLOR, key:=~ID) %>%\n    #   layer_points() %>%\n    #   add_axis(\"x\", subdivide=4) %>%\n    #   add_axis(\"y\", title=\"\") %>%\n    #   hide_legend(\"stroke\") %>%\n    #   add_tooltip(tooltip_helper, \"hover\") %>%\n    #   bind_shiny(\"rankings_plot\")\n\n    \n    \n    #================================ market_histogram plotly output\n    # resource.df %>%\n    #   ggvis(x=~PRICE, fill:=~REP_COLOR) %>%\n    #   group_by(REP_COLOR) %>%\n    #   layer_histograms(width=input_slider(label=\"Binwidth\", min=0.1, max=2, value=0.2, step=0.1)) %>%\n    #   add_axis(\"x\", subdivide=4) %>%\n    #   hide_legend(\"stroke\") %>%\n    #   add_tooltip(histogram_tooltip, \"hover\") %>%\n    #   bind_shiny(\"market_histogram\", \"market_histogram_slider\")\n\n    \n    \n    #================================ market_scatterplot plotly output\n    output$market_scatterplot <- renderPlotly({\n      \n      if(is.null(resource.df()) | !is.data.table(resource.df())) return(NULL)\n      color.map <- color.mapper(resource.df(), REP_COLOR_MAP, input$rep1,input$rep2,input$rep3)\n       \n      ax <- list(\n        title = \"PRICE\",\n        titlefont= list(\n          family = \"Courier New, monospace\",\n          size = 17\n        ),\n        zeroline = FALSE,\n        showline = FALSE,\n        showticklabels = TRUE,\n        showgrid = FALSE\n      )\n      \n      ay <- list(\n        title = \"Lenght Term\",\n        titlefont= list(\n          family = \"Courier New, monospace\",\n          size = 17\n        ),\n        zeroline = FALSE,\n        showline = FALSE,\n        showticklabels = TRUE,\n        showgrid = FALSE\n        \n      )\n      \n      plot_ly(data = copy(resource.df())[, REP:= factor(REP, levels = sort(unique(REP)))], \n              x = ~PRICE,\n              y = ~TERM_LENGTH,\n              mode = 'markers',\n              type = 'scatter', \n              color = ~REP,\n              colors = color.map,\n              hoverinfo = 'text',\n              text = ~paste0(\n                '</br> Price: $', PRICE,\n                '</br> Product: ', PRODUCT,\n                '</br> Rate Type: ', RATE_TYPE,\n                '</br> Term length: ', TERM_LENGTH,\n                '</br> Retail Electric Provide (REP): ', REP,\n                '</br> Transmission and Distribution Service Provider (TDU): ', TDU\n                )\n              )%>%\n        layout(xaxis = ax, yaxis = ay, showlegend = FALSE)\n    })\n    \n    # resource.df %>%\n    #   ggvis(x=~PRICE, y=~TERM_LENGTH, size:=50, fill:=~REP_COLOR, key:=~ID) %>%\n    #   layer_points() %>%\n    #   add_axis(\"x\", subdivide=4) %>%\n    #   hide_legend(\"stroke\") %>%\n    #   add_tooltip(tooltip_helper, \"hover\") %>%\n    #   bind_shiny(\"market_scatterplot\")\n})",
    "created" : 1494619818878.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1050992795",
    "id" : "6FBA0915",
    "lastKnownWriteTime" : 1495055172,
    "last_content_update" : 1495055172210,
    "path" : "~/GITHUB/electricityViz/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}