shiny::runApp()
runApp()
?foreach
?foreach()
libraries()
?foreach()
?foreach
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
libraries()
?foreach
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
?switch
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1)
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
shiny::runApp()
?min_rank
x <- c(5, 1, 3, 2, 2, NA)
min_rank(X)
min_rank(x)
x <- c(5, 1, 3, 2, 2, NA)
min_rank(x)
?rank
frankv(x, ties.method="min")
arrange(frankv(x, ties.method="min"))
order(frankv(x, ties.method="min"))
order(frankv(x, ties.method="min"))
frankv(x, ties.method="min")
x <- c(5, 1, 3, 2, 2, NA)
min_rank(x)
runApp()
runApp()
source('~/GITHUB/electricityViz/data/functions.R')
runApp()
shiny::runApp()
runApp()
runApp()
?shiny::checkboxInput()
?shiny::checkboxInput
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df_base)
source('~/GITHUB/electricityViz/data/functions.R')
df_base <- get.data("update")
View(df_base)
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/playground.R')
View(data)
source('~/GITHUB/electricityViz/data/playground.R')
View(data)
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/playground.R')
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?renderPlotly
p_load(plotly)
source('~/GITHUB/electricityViz/data/functions.R')
libraries()
runApp()
View(color.mapper)
source('~/GITHUB/electricityViz/data/functions.R')
runApp()
source('~/GITHUB/electricityViz/data/functions.R')
REP_COLOR_MAP <- c(
"REP1" = "#ff9800",
"REP2" = "#72142e",
"REP3" = "#0f2a56",
"OTHER" = "#717471"
)
REP_COLOR_MAP[1]
unnamed(REP_COLOR_MAP[1])
unnamed(REP_COLOR_MAP)[1]
unname(REP_COLOR_MAP)[1]
unnam(REP_COLOR_MAP[1])
unname(REP_COLOR_MAP[1])
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/playground.R')
View(data)
source('~/GITHUB/electricityViz/data/playground.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/playground.R')
source('~/GITHUB/electricityViz/data/playground.R')
source('~/GITHUB/electricityViz/data/functions.R')
source('~/GITHUB/electricityViz/data/playground.R')
result
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
is.null(c("Yo",1,"l"))
is.null(c("Yo",1,NULL))
runApp()
shiny::runApp()
source('~/GITHUB/electricityViz/data/playground.R')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
ifelse("bo" %in% "ALL", c("TRUE","FALSE"), input$promotion)
ifelse("bo" %in% "ALL", c("TRUE","FALSE"), "bo")
ifelse("ALL" %in% "ALL", c("TRUE","FALSE"), "bo")
ifelse("ALL" %in% "ALL", list("TRUE","FALSE"), "bo")
input$prepaid, x <- 1,2
ifelse("ALL" %in% "ALL", c("TRUE","FALSE"), "bo") -> x
runApp()
if("bo" %in% "ALL"){ prepaid <- c("TRUE","FALSE")}else{prepaid <- "bo"}
if("ALL" %in% "ALL"){ prepaid <- c("TRUE","FALSE")}else{prepaid <- "bo"}
runApp()
runApp()
View(df_base)
runApp()
